using System;
using System.IO;

namespace dev275x.studentlist
{
    class Program
    {
        {
            if (args == null || args.Length != 1)
            {
                ShowUsage();
                return;
            }
            var fileContents = LoadData(Constants.StudentList);

            if (args[0] == Constants.ShowAll) 
            {
                var words = fileContents.Split(Constants.StudentEntryDelimiter);
                foreach(var word in words) 
                {
                    Console.WriteLine(word);
                }
            }
            else if (args[0]== Constants.ShowRandom)
            {
                var words = fileContents.Split(Constants.StudentEntryDelimiter);
                var rand = new Random();
                var randomIndex = rand.Next(0,words.Length);
                Console.WriteLine(words[randomIndex]);
            }
            else if (args[0].Contains(Constants.AddEntry))
            {
                var argValue = args[0].Substring(1);
                UpdateContent(fileContents + Constants.StudentEntryDelimiter + argValue, Constants.StudentList);
            }
            else if (args[0].Contains(Constants.FindEntry))
            {
                var words = fileContents.Split(Constants.StudentEntryDelimiter);
                var argValue = args[0].Substring(1);
                var indexLocation = -1;
                for (int idx = 0; idx < words.Length; idx++)
                {
                    if (words[idx].Trim() == argValue)
                    {
                        indexLocation = idx;
                        break;
                    }
                }

                if (indexLocation >= 0)
                {
                    Console.WriteLine($"Entry '{argValue}' found at index {indexLocation}");
                }
                else
                {
                    Console.WriteLine($"Entry '{argValue}' does not exist");
                }
            }
            else if (args[0].Contains(Constants.ShowCount))
            {
                var words = fileContents.Split(Constants.StudentEntryDelimiter);
                Console.WriteLine(String.Format("{0} words found", words.Length));
            }
            else
            {
                ShowUsage();
            }
        }

        static string LoadData(string fileName)
        {
            using (var fileStream = new FileStream(fileName,FileMode.Open))
            using (var reader = new StreamReader(fileStream))
            {
                return reader.ReadLine();
            }
        }

        static void UpdateContent(string content, string fileName)
        {
            var timestamp = String.Format("List last updated on {0}", DateTime.Now);
            using (var fileStream = new FileStream(fileName,FileMode.Open))
            using (var writer = new StreamWriter(fileStream))
            {
                writer.WriteLine(content);
                writer.WriteLine(timestamp);
            }
        }

        static void ShowUsage()
        {
            Console.WriteLine("Usage: dotnet dev275x.rollcall.dll (-a | -r | -c | +WORD | ?WORD)");
        }
    }
}